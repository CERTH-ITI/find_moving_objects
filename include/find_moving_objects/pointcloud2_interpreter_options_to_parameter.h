// #include <find_moving_objects/option.h>

// namespace find_moving_objects
// {

/* USER OPTIONS */
Option g_options[] = {
  Option(false, "--map_frame",
         "The frame used as map frame",
         std::string("map")),
  Option(false, "--fixed_frame",
         "The frame used as fixed/odometry frame",
         std::string("odom")),
  Option(false, "--base_frame",
         "The base frame of the robot",
         std::string("base_link")),
  Option(false, "--sensor_frame_has_z_axis_forward",
         "The sensor is using an optical frame (x right, y down and z forward)",
         false),
  Option(false, "--nr_scans_in_bank",
         "Size of the bank containing subsequent, EMA:ed messages (ignored if the below option is not 0.0 seconds)",
         10, 2, 20),
  Option(false, "--optimize_nr_scans_in_bank",
         "If not 0.0, then the bank size is optimized to cover the given time period (seconds)",
         0.5, 0.0, std::numeric_limits<float>::max()), // 0.5 seconds is assumed in the confidence calculation function
  Option(false, "--nr_points_per_scan_in_bank",
         "Determines the resolution of the bank",
         360, 1, 1800), // 720
  Option(false, "--bank_view_angle",
         "View angle, centered on the X axis",
         M_PI, 0.0, 2*M_PI), // Resolution is 0.5 degrees by default
  Option(false, "--ema_alpha",
         "EMA coefficient representing the degree of weighting decrease",
         1.0, 0.0, 1.0),
  Option(false, "--subscribe_buffer_size",
         "Subscription queue size (should be 1 if only the latest sensor reading is of interest))",
         1, 1, 1000),
  Option(false, "--subscribe_topic",
         "Topic on which sensor data is published",
         std::string("/camera/depth/color/points/filtered")),
  Option(false, "--no_publish_objects",
         "Do not publish any MovingObjectArray messages",
         false),
  Option(false, "--publish_ema",
         "Publish EMA:ed data with objects marked as a LaserScan message",
         false),
  Option(false, "--publish_objects_closest_point_markers",
         "Publish closest points of each object as a LaserScan message",
         false),
  Option(false, "--publish_objects_velocity_arrows",
         "Publish position (arrow base) and velocity (arrow length) of objects as a MarkerArray message",
         false),
  Option(false, "--publish_objects_delta_position_lines",
         "Publish delta position line of objects as a MarkerArray message (lines)",
         false),
  Option(false, "--publish_objects_width_lines",
         "Publish width line of objects as a MarkerArray message (lines)",
         false),
  Option(false, "--publish_buffer_size",
         "Publishing queue size",
         1, 1, 1000),
  Option(false, "--topic_objects",
         "Topic for publishing MovingObjectArray messages",
         std::string("moving_objects")),
  Option(false, "--topic_ema",
         "Topic for publishing EMA:ed data",
         std::string("ema")),
  Option(false, "--topic_objects_closest_point_markers",
         "Topic for publishing closest points of the objects",
         std::string("objects_closest_point_markers")),
  Option(false, "--topic_objects_velocity_arrows",
         "Topic for publishing position and velocity",
         std::string("objects_velocity_arrows")),
  Option(false, "--topic_objects_delta_position_lines",
         "Topic for publishing delta position lines",
         std::string("objects_delta_position_lines")),
  Option(false, "--topic_objects_width_lines",
         "Topic for publishing width lines",
         std::string("objects_width_lines")),
  Option(false, "--velocity_arrows_use_full_gray_scale",
         "Shift color/confidence of arrow to full gray scale (white is high confidence)",
         false),
  Option(false, "--velocity_arrows_use_sensor_frame",
         "Show velocity of object in relation to sensor instead of map",
         false),
  Option(false, "--velocity_arrows_use_base_frame",
         "Show velocity of object in base frame instead of map",
         false),
  Option(false, "--velocity_arrows_use_fixed_frame",
         "Show velocity of object in fixed frame instead of map",
         false),
  Option(false, "--message_x_coordinate_field_name",
         "Name of X coordinate offset field in the point cloud messages",
         std::string("x")),
  Option(false, "--message_y_coordinate_field_name",
         "Name of Y coordinate offset field in the point cloud messages",
         std::string("y")),
  Option(false, "--message_z_coordinate_field_name",
         "Name of Z coordinate offset field in the point cloud messages",
         std::string("z")),
  Option(false,  "--voxel_leaf_size",
         "Approximate distance between two point cloud points",
         0.01, 0.001, 0.1),
  Option(false, "--threshold_z_min",
         "Points with Z coordinates smaller than this are discarded",
         0.0, -std::numeric_limits<float>::max(), std::numeric_limits<float>::max()),
  Option(false, "--threshold_z_max",
         "Points with Z coordinates larger than this are discarded",
         0.6, -std::numeric_limits<float>::max(), std::numeric_limits<float>::max()),
  Option(false, "--object_threshold_edge_max_delta_range",
         "Maximum distance between two consecutive scan points belonging to the same object",
         0.15, 0.0, std::numeric_limits<float>::max()), // 0.072
  Option(false, "--object_threshold_min_nr_points",
         "Objects must consist of at least this number of consecutive scan points",
         3, 1, 1800), // 5
  Option(false, "--object_threshold_max_distance",
         "Object must consist of scan points with maximum this range",
         6.5, 0.0, std::numeric_limits<float>::max()),
  Option(false, "--object_threshold_min_speed",
         "Minimum speed of object to consider it moving",
         0.1, 0.0, std::numeric_limits<float>::max()),
  Option(false, "--object_threshold_max_delta_width_in_points",
         "Maximum size difference in points to consider old and current object instances the same",
         15, 0, 1800),
  Option(false, "--object_threshold_bank_tracking_max_delta_distance",
         "Maximum distance an object is allowed to move between two consecutive scans while tracking it through the bank",
         std::numeric_limits<float>::max(), 0.0, std::numeric_limits<float>::max()),
  Option(false, "--object_threshold_min_confidence",
         "Minimum confidence of object for publishing it",
         0.7, 0.0, 1.0), // 0.65
  Option(false, "--base_confidence",
         "How much we trust the sensor data",
         0.4, 0.0, 1.0),
};


/* USER OPTION INDICES FOR EASY ACCESS */
typedef enum {
  O_I_MAP_FRAME = 0,
  O_I_FIXED_FRAME,
  O_I_BASE_FRAME,
  O_I_SENSOR_FRAME_HAS_Z_AXIS_FORWARD,
  O_I_NR_SCANS_IN_BANK,
  O_I_OPTIMIZE_NR_SCANS_IN_BANK,
  O_I_NR_POINTS_PER_MESSAGE_IN_BANK,
  O_I_BANK_VIEW_ANGLE,
  O_I_EMA_ALPHA,
  O_I_SUBSCRIBE_BUFFER_SIZE,
  O_I_SUBSCRIBE_TOPIC,
  O_I_NO_PUBLISH_OBJECTS,
  O_I_PUBLISH_EMA,
  O_I_PUBLISH_OBJECTS_CLOSEST_POINT_MARKERS,
  O_I_PUBLISH_OBJECTS_VELOCITY_ARROWS,
  O_I_PUBLISH_OBJECTS_DELTA_POSITION_LINES,
  O_I_PUBLISH_OBJECTS_WIDTH_LINES,
  O_I_PUBLISH_BUFFER_SIZE,
  O_I_TOPIC_OBJECTS,
  O_I_TOPIC_EMA,
  O_I_TOPIC_OBJECTS_CLOSEST_POINT_MARKERS,
  O_I_TOPIC_OBJECTS_VELOCITY_ARROWS,
  O_I_TOPIC_OBJECTS_DELTA_POSITION_LINES,
  O_I_TOPIC_OBJECTS_WIDTH_LINES,
  O_I_VELOCITY_ARROWS_USE_FULL_GRAY_SCALE,
  O_I_VELOCITY_ARROWS_USE_SENSOR_FRAME,
  O_I_VELOCITY_ARROWS_USE_BASE_FRAME,
  O_I_VELOCITY_ARROWS_USE_FIXED_FRAME,
  O_I_MESSAGE_X_COORDINATE_FIELD_NAME,
  O_I_MESSAGE_Y_COORDINATE_FIELD_NAME,
  O_I_MESSAGE_Z_COORDINATE_FIELD_NAME,
  O_I_VOXEL_LEAF_SIZE,
  O_I_THRESHOLD_Z_MIN,
  O_I_THRESHOLD_Z_MAX,
  O_I_OBJECT_THRESHOLD_EDGE_MAX_DELTA_RANGE,
  O_I_OBJECT_THRESHOLD_MIN_NR_POINTS,
  O_I_OBJECT_THRESHOLD_MAX_DISTANCE,
  O_I_OBJECT_THRESHOLD_MIN_SPEED,
  O_I_OBJECT_THRESHOLD_MAX_DELTA_WIDTH_IN_POINTS,
  O_I_OBJECT_THRESHOLD_BANK_TRACKING_MAX_DELTA_DISTANCE,
  O_I_OBJECT_THRESHOLD_MIN_CONFIDENCE,
  O_I_BASE_CONFIDENCE,
  NR_OPTIONS
} option_index_t;

// } // namespace find_moving_objects
